-- data for user authentication (registration & login)
CREATE TABLE Auth (
    uid INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    firstname VARCHAR(255) NOT NULL,
    lastname VARCHAR(255) NOT NULL,
    school VARCHAR(255) NOT NULL
);
 

-- notice: 'user' is a reserved word in Postgres, which means 
-- if you use user as the table name, you will have an error
-- data for user profile & dashboard
CREATE TABLE Users (
	uid INT NOT NULL PRIMARY KEY  GENERATED BY DEFAULT AS IDENTITY,
    nickname VARCHAR(255) UNIQUE NOT NULL,
    citenum INT DEFAULT 0, 
    research_interest TEXT
);

-- user citation cart
CREATE TABLE User_cart (
	uid INT NOT NULL,
    cite_pid INT NOT NULL,
    time_added timestamp without time zone NOT NULL DEFAULT (now()::timestamp(0))
);
 
-- user citation history
CREATE TABLE Users_cite_history (
    uid INT NOT NULL,
    order_num TEXT NOT NULL,
    cite_pid INT NOT NULL
);

-- user browser history of papers
CREATE TABLE User_browse (
	uid INT NOT NULL,
	browsed_pid INT NOT NULL,
    time_browsed timestamp without time zone NOT NULL DEFAULT (now()::timestamp(0)),
    PRIMARY KEY (uid,browsed_pid,time_browsed)
);
 
-- userâ€™s collection
-- CREATE TABLE Collections(
-- 	uid INT NOT NULL,	
--     collection_name VARCHAR(255) UNIQUE NOT NULL,
-- 	pid INT NOT NULL,
--     PRIMARY KEY (uid,collection_name)
-- );
-- check if the user has Collections of this name, if he/she has, don't let the user create/rename
CREATE TABLE Collections(
	uid INT NOT NULL,	
    collection_name VARCHAR(255) NOT NULL,
	pid INT NOT NULL,
    PRIMARY KEY (uid,collection_name,pid)
);

-- paper research platform table
-- paper table
CREATE TABLE Papers (
    pid INT NOT NULL PRIMARY KEY,
    title TEXT CHECK (length(title) <= 500),
    year INT,
    conference TEXT CHECK (length(conference) <= 500)
);
 

-- authorship
CREATE TABLE Authorship (
    pid INT,
    author TEXT
);

-- citation relationship among papers
CREATE TABLE Citation (
	pid INT NOT NULL,
    cite_pid INT NOT NULL,
    PRIMARY KEY (pid, cite_pid)
);



-- abstract
CREATE TABLE Abstract (
    pid INT NOT NULL PRIMARY KEY,
    abstract TEXT
);

CREATE TABLE Comment (
    pid INT NOT NULL,
    uid INT NOT NULL, 
    star INT NOT NULL,
    comment_sum TEXT,
    comment_text TEXT,
    time_submitted timestamp without time zone NOT NULL DEFAULT (now()::timestamp(0)),
    helpful_vote INT NOT NULL, 
    PRIMARY KEY (pid,uid)
);

CREATE TABLE Helpful (
    pid INT NOT NULL,
    uid INT NOT NULL,
    upvote_by_uid INT NOT NULL,
    PRIMARY KEY (pid, uid, upvote_by_uid)
);

CREATE TABLE Message (
    sender_uid INT NOT NULL,
    receiver_uid INT NOT NULL,
    message_text TEXT NOT NULL,
    time_sent timestamp without time zone NOT NULL DEFAULT (now()::timestamp(0)),
    PRIMARY KEY (sender_uid, receiver_uid, time_sent)
);





